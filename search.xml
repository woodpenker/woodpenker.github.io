<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>XPS13-intel-CPU超频导致发热严重</title>
    <url>/2020/06/07/XPS13-intel-CPU%E8%B6%85%E9%A2%91%E5%AF%BC%E8%87%B4%E5%8F%91%E7%83%AD%E4%B8%A5%E9%87%8D/</url>
    <content><![CDATA[<h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p>前段时间入手了一台xps13,安装了fedora28后,经常在启动和关机时出项cpu过热的报警信息:</p>
<a id="more"></a>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[26670.911219] CPU1: Core temperature above threshold, cpu clock throttled (total events &#x3D; 1)</span><br><span class="line">[26670.911221] CPU0: Core temperature above threshold, cpu clock throttled (total events &#x3D; 1)</span><br><span class="line">[26670.911222] CPU2: Package temperature above threshold, cpu clock throttled (total events &#x3D; 1)</span><br><span class="line">[26670.911223] CPU3: Package temperature above threshold, cpu clock throttled (total events &#x3D; 1)</span><br><span class="line">[26670.911224] CPU0: Package temperature above threshold, cpu clock throttled (total events &#x3D; 1)</span><br><span class="line">[26670.911232] CPU1: Package temperature above threshold, cpu clock throttled (total events &#x3D; 1)</span><br></pre></td></tr></table></figure>

<p>主要是由于主板打开了超频选项,内核也支持超频,使得cpu由1.2GHZ超频到4GHZ以上,明显感觉主机发热严重.使用<code>s-tui</code>记录CPU温度都达到100度.真的是<em>烤鸡</em>了…</p>
<h1 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h1><p>查阅相关资料显示,intel的cpu可以通过修改<code>/sys/devices/system/cpu/intel_pstate</code>下的设置修改cpu超频.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">╰─$ ls /sys/devices/system/cpu/intel_pstate </span><br><span class="line">max_perf_pct  min_perf_pct  no_turbo  num_pstates  status  turbo_pct</span><br></pre></td></tr></table></figure>

<p>可以通过修改<code>no_turbo</code>为<code>1</code>来关闭超频.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> 1 |sudo tee /sys/devices/system/cpu/intel_pstate/no_turbo</span><br></pre></td></tr></table></figure>

<p>cpu温度明显的降到了40度左右,发热现象消失了.<br>开了n个虚拟机和chrome视频站点以及vscode,检测cpu的使用率并未负载严重,说明这样已经基本满足日常使用需求了,起码可以省电,减少发热.</p>
<p>这样做在重启后会失效,除非自己修改内核配置再编译内核.关闭内核超频开关,或者开机F12进入主板设置,把turbo关闭.<br>但是这样做不够灵活,万一我突然有大量的计算要跑呢?</p>
<p>工具和方法有很多:</p>
<p>可以参考这里的回答:<a href="https://askubuntu.com/questions/391474/stop-cpu-from-overheating/875872#875872" target="_blank" rel="noopener">stop cpu from overheating</a></p>
<ul>
<li><p>TLP工具是个选择,不仅能够减少发热,还能极端的降低电池消耗,延长电池使用时间.</p>
</li>
<li><p>简单点的即使关闭<code>turbo</code>,可以通过systemd自动加载服务的方式来保证开机自动关闭参考<a href="https://blog.christophersmart.com/2017/02/08/manage-intel-turbo-boost-with-systemd/" target="_blank" rel="noopener"><br>  Manage Intel Turbo Boost with systemd</a>:<br>  新建一个文件<code>/usr/lib/systemd/system/disable-turbo-boost.service</code> 打开并编辑该文件写入:</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description&#x3D;Disable Turbo Boost on Intel CPU</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">ExecStart&#x3D;&#x2F;bin&#x2F;sh -c &quot;&#x2F;usr&#x2F;bin&#x2F;echo 1 &gt; \</span><br><span class="line">&#x2F;sys&#x2F;devices&#x2F;system&#x2F;cpu&#x2F;intel_pstate&#x2F;no_turbo&quot;</span><br><span class="line">ExecStop&#x3D;&#x2F;bin&#x2F;sh -c &quot;&#x2F;usr&#x2F;bin&#x2F;echo 0 &gt; \</span><br><span class="line">&#x2F;sys&#x2F;devices&#x2F;system&#x2F;cpu&#x2F;intel_pstate&#x2F;no_turbo&quot;</span><br><span class="line">RemainAfterExit&#x3D;yes</span><br><span class="line">User&#x3D;root</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy&#x3D;sysinit.target</span><br></pre></td></tr></table></figure>

<p>使用<code>sudo systemctl daemon-reload</code>加载服务配置<br>使用:<code>sudo systemctl enable disable-turbo-boost.service</code>来开启该服务,<br>使用<code>sudo systemctl start disable-turbo-boost.service</code>来启动该服务.<br>这样就可以开机自动启动关闭turbo的功能.如果像临时关闭turbo,那么就使用<code>sudo systemctl stop disable-turbo-boost.service</code></p>
<ul>
<li>可是我不想每次需要关闭的时候都去执行systemd命令,我想在gnome dash中执行程序,那么在gnome下我也可以自己新建一个app:    <code>~/.local/share/applications/open-turbo.desktop</code><br>编辑其内容为:</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[Desktop Entry]</span><br><span class="line">Version&#x3D;1.0</span><br><span class="line">Type&#x3D;Application</span><br><span class="line">Name&#x3D;openturbo</span><br><span class="line">Comment&#x3D;open cpu turbo boost</span><br><span class="line">Exec&#x3D;gksudo -k -u root &#x2F;bin&#x2F;sh -c &quot;&#x2F;usr&#x2F;bin&#x2F;echo 0 &gt; &#x2F;sys&#x2F;devices&#x2F;system&#x2F;cpu&#x2F;intel_pstate&#x2F;no_turbo&quot;</span><br><span class="line">Terminal&#x3D;false</span><br><span class="line">Categories&#x3D;Utilities;</span><br></pre></td></tr></table></figure>

<ul>
<li>如果你习惯使用gnome的插件,希望在桌面就可以控制cpu频率上限和超频选项,那么可以使用<a href="https://extensions.gnome.org/extension/945/cpu-power-manager/" target="_blank" rel="noopener">extension</a>,其代码地址<a href="https://github.com/martin31821/cpupower" target="_blank" rel="noopener">github</a></li>
</ul>
<p>有关于tubo加速的内核参数设置可以参考这里<a href="http://lynnapan.github.io/2016/12/15/Turbo%E5%92%8CIntel_Pstate/" target="_blank" rel="noopener">服务器server的频率知识整理</a>:</p>
]]></content>
      <categories>
        <category>折腾笔记</category>
      </categories>
      <tags>
        <tag>fedora</tag>
        <tag>linux</tag>
        <tag>折腾</tag>
      </tags>
  </entry>
  <entry>
    <title>docker 学习笔记</title>
    <url>/2020/06/07/docker%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1>docker 学习笔记</h1>

<h2 id="概念理解"><a href="#概念理解" class="headerlink" title="概念理解"></a>概念理解</h2><p>docker的功能比较像一个chroot应用,拥有一个守护进程daemon.</p>
<p>docker容器并不是一个完整的系统,不包含linux内核,并且只是一个最小系统.docker容器的内核依旧是宿主系统的内核.docker利用了linux内核的<strong>命名空间namespace</strong>,<strong>容器组cgroup</strong>,<strong>设备映射</strong>的技术.</p>
<a id="more"></a>
<p>docker的命令使用起来比较像git.</p>
<p>docker拥有官方hub和可以私有搭建的镜像库registry(默认docker官方的docker hub),提供镜像下载服务.</p>
<p>docker文件系统利用了<strong>联合加载(union mount)</strong>和<strong>写时复制(copy on write)</strong>的技术(aufs也是该技术),可以在文件系统上叠加文件结构,形成层级关系,但是从纵向看过去就像一个文件系统.通过镜像库下载的镜像作为最底层rootfs,并不能被修改,而是每次修改都记录在一个层中,在最顶层加载一个读写文件系统,使得看上去好像我们修改了底层系统一样.</p>
<p>docker目前使用时必须具有<strong>root权限</strong>.因为需要用到宿主底层的接口.</p>
<p>docker启动后会修改镜像中的<code>/etc/hosts</code>和<code>/etc/resolv.conf</code>文件,使得docker容器可以使用主机的网络环境,以及记录docker network子网路由解析信息等.docker会感知所使用网络下的所有容器并将相应的DNS信息写入每个容器的<code>/etc/hosts</code>中,如果指定了容器的名称,主机可以使用hostname.netname的形式解析DNS.</p>
<p>docker容器默认不对外公开任何接口,是无法访问的,需要给容器指定对外的接口</p>
<p>docker默认使用<strong>172.17.x.x</strong>作为子网地址,除非该子网被占用.如果占用,则从<strong>172.16~172.30</strong>中尝试.</p>
<p>docker安装时会创建一个新的网络接口<strong>docker0</strong>,作为默认网络桥.它是一个虚拟的以太网桥,用于连接宿主和容器.docker每创建一个容器就会创建一组互联的网络接口,一端作为容器的eth0接口,一端作为veth开头的接口存在与宿主作为一个宿主端口,可以认为它是一根网线连接在docker0和容器内网卡上.</p>
<p>(1.9版本以上)可以创建自己的专用容器间网络,称为<strong>Docker Networking</strong>.使得容器可以跨越不同的主机进行通信,并且是支持可插拔的.</p>
<p>docker容器间通讯的两种方式: 通过docker网络 和 使用link链接连接容器.</p>
<h2 id="docker常用命令"><a href="#docker常用命令" class="headerlink" title="docker常用命令"></a>docker常用命令</h2><p><strong>守护进程/usr/bin/docker启动选项</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">--log-driver 下同docker run的 --log-driver,版本1.6以后可用</span><br><span class="line">-insecure-registry localhost:5000 &#x2F;&#x2F;启动守护进程时指定本地registry</span><br><span class="line">--ice&#x3D;false 关闭所有没有链接的容器间的通讯</span><br><span class="line">-H tcp:&#x2F;&#x2F;0.0.0.0:2375 将docker守护进程绑定到宿主机的所有网络的2375端口上DOCKER_HOST环境变量代指该参数</span><br><span class="line">-d 作为daemon守护进程启动在后台</span><br></pre></td></tr></table></figure>

<p><strong>启动基于容器的本地registry</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo docker run -p 5000:5000 registry:2</span><br></pre></td></tr></table></figure>

<p><strong>docker run</strong> 创建并运行一个容器</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo docker run -i -t ubuntu:16.04 &#x2F;bin&#x2F;bash &#x2F;&#x2F;镜像名ubuntu后加:16.04指定ubuntu仓库类目下的某一镜像16.04,&#x2F;bin&#x2F;bash是启动容器后需要执行的命令</span><br><span class="line"></span><br><span class="line">-i 保证stdin开启,以便支持交互式访问容器</span><br><span class="line">-t 为容器分配一个伪tty终端,以便交互式访问容器</span><br><span class="line">-d 将容器放在后台运行,使用deamon模式</span><br><span class="line">-p 8080:80 指定docker容器运行时对外公开的端口,将容器的80端口映射到宿主机的8080端口,</span><br><span class="line">-p 80 则docker在宿主机中从32768-61000中选择一个端口号映射到容器的80端口</span><br><span class="line">-p 127.0.0.1:8080:80&#x2F;udp 则指定了绑定的本地宿主机的IP,并且指定UDP端口.</span><br><span class="line">-P 对外公开在Dockerfile中使用EXPOSE指令公开的所有端口</span><br><span class="line">--name 为启动的容器指定一个名称,即容器名,而不是使用自动生成的名称,支持a-z,A-Z,0-9,下划线,圆点,横线,即正则:[a-zA-Z0-9_.-]</span><br><span class="line">--log-driver 控制容器使用日志驱动,可选:syslog(禁用docker logs并将所有容器日志重定向到syslog中),默认json-file,none(禁用日志)等</span><br><span class="line">--restart&#x3D;always&#x2F;on-failure:5 让容器自动重启,always是一直重启,on-failure指定容器退出代码非0后重启,后面数字指定当容器退出代码非0以后重启的次数.(1.2版本以后)</span><br><span class="line">--entrypoint 标志可以覆盖ENTRYPOINT指令</span><br><span class="line">-w 指令会在运行时覆盖WORKDIR工作目录设置 -w &#x2F;var&#x2F;log</span><br><span class="line">-e 传递环境变量 -e &quot;WEB&#x3D;&#x2F;var&#x2F;www&#x2F;html&quot;</span><br><span class="line">-u 覆盖USER指令</span><br><span class="line">--build-arg 开启ARG参数,其后可以给参数指定值,如 --build-arg build&#x3D;1234</span><br><span class="line">-v 指定一个目录映射对应于容器内的一个目录,将宿主机中的目录作为卷挂载到容器,使用:分割,后面加ro(只读)或rw(可读写)指定读写权限,如果容器内目录不存在则自动创建一个. 如: -v &#x2F;home&#x2F;web:&#x2F;var&#x2F;www&#x2F;html:ro</span><br><span class="line">--net&#x3D;mynet 指定运行时使用的docker网络</span><br><span class="line">--link A:B 创建两个容器间的C-S链接,A是要链接的容器名,B是链接的别名.--link链接的容器不需要对外公开接口.可以多处使用指定多个容器.docker会在父容器修改&#x2F;etc&#x2F;hosts和写入包含链接信息的环境变量(以别名B的大写开头).</span><br><span class="line">--hostname 或-h 指定容器的主机名,容器内主机的名称</span><br><span class="line">--add-host 在&#x2F;etc&#x2F;hosts中添加主机记录</span><br><span class="line">--dns或--dns-search为某个容器单独配置DNS(写入&#x2F;etc&#x2F;resolv.conf).</span><br><span class="line">--privileged 启动docker特权模式,允许以宿主机具有的(几乎)所有能力来运行容器,包括内核特性和设备访问,用来在docker中运行docker.容器在这个模式下对宿主具有root访问权限.</span><br><span class="line">--cidfile&#x3D;&#x2F;tmp&#x2F;container.id.txt,让docker截获容器ID并存到指定的文件里.</span><br><span class="line">--volume-from ubuntu-test 把指定容器ubuntu-test里的所有卷都加入到新创建的容器里,即便ubuntu-test没有运行,也能访问到它的卷.即使删除了使用卷的最后一个容器,卷中的数据也会持久保存.</span><br><span class="line">--rm 标志创建只用一次的容器,使用完就删除.可以用于测试或者备份容器内的卷:</span><br><span class="line"></span><br><span class="line">sudo docker run --rm --volumes-from ubuntu-test -v &#x2F;home:&#x2F;backup ubuntu tar cvf &#x2F;backup&#x2F;bk.tar &#x2F;data  </span><br><span class="line">&#x2F;&#x2F;使用ubuntu基础镜像创建一个只用一次的镜像,将宿主本地&#x2F;home目录挂载到ubuntu-test容器的&#x2F;backup下,并且执行压缩命令将&#x2F;data目录下的文件压缩到&#x2F;backup&#x2F;bk.tar文件中.这样在宿主的目录下就会有一个bk.tar作为ubuntu-test下的&#x2F;data的备份.</span><br></pre></td></tr></table></figure>

<p><strong>docker ps</strong> 列出正在运行的容器</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-a 列出所有容器</span><br><span class="line">-q 只返回容器的ID列不返回其他信息</span><br></pre></td></tr></table></figure>

<p><strong>docker start</strong> 启动已经创建并停止的容器</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo docker start ubuntu_test</span><br></pre></td></tr></table></figure>

<p><strong>docker attach</strong> 重新附着到重启以后的容器会话上</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo docker attach ubuntu_test</span><br></pre></td></tr></table></figure>

<p><strong>docker logs</strong> 获取容器的日志</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo docker logs ubuntu_test</span><br><span class="line"></span><br><span class="line">-f 持续监控容器日志,类似tail -f,crtl+c退出监控</span><br><span class="line">-t 为每条日志加上时间戳,便于调试</span><br></pre></td></tr></table></figure>

<p><strong>docker top</strong> 查看以守护式方式运行在后台的容器内的进程</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo docker top ubuntu_test</span><br></pre></td></tr></table></figure>

<p><strong>docker exec</strong> 在正在运行容器内部执行新的命令或额外启动新的进程(1.3版本以后)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo docker exec -d ubuntu_test touch 1.file</span><br><span class="line"></span><br><span class="line">-d 指定要在内部执行命令的容器的名字和执行的命令</span><br><span class="line">-u 为新启动的进程指定一个用户属性(1.7版本以后)</span><br></pre></td></tr></table></figure>

<p><strong>docker stop</strong> 停止守护式的容器</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo docker stop c2c4e57c12</span><br></pre></td></tr></table></figure>

<p><strong>docker kill</strong> 发送信号给容器</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo docker kill -s &lt;sibnal&gt; &lt;container&gt;</span><br></pre></td></tr></table></figure>

<p><strong>docker inspect</strong> 获取容器的详细信息</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo docker inspect ubuntu_test</span><br><span class="line">-f&#x2F;--format&#x3D;&#123;&#123; &#125;&#125; 筛选结果,支持使用go的模板</span><br><span class="line">sudo docker inspect --format&#x3D;&#39;&#123;&#123; .Config.Hostname &#125;&#125;&#39; ubuntu_test 只显示出Config下Hostname子项的内容</span><br></pre></td></tr></table></figure>

<p><strong>docker rm</strong> 删除不再使用的容器</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo docker rm 80430f8d</span><br><span class="line">-f 强制删除正在运行的容器</span><br><span class="line">sudo docker rm $(sudo docker ps -a -q) 组合命令可以删除所有容器</span><br></pre></td></tr></table></figure>

<p><strong>docker rmi</strong> 删除一个或多个镜像</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo docker rmi ubuntu_test test &#x2F;&#x2F;删除多个镜像</span><br><span class="line">sudo docker rmi $(sudo docker images -a -q) &#x2F;&#x2F;删除所有镜像</span><br></pre></td></tr></table></figure>

<p><strong>docker images</strong> 列出docker镜像</p>
<p>本地的镜像都保存在<code>/var/lib/docker</code>下,所有容器在<code>/var/lib/docker/container</code>下</p>
<p><strong>docker pull</strong> 将某个镜像从registry中拉取下来到本地</p>
<p><code>sudo docker pull fedora:20</code></p>
<p><strong>docker search</strong> 在registry中查询某个镜像</p>
<p><code>sudo docker search ubuntu</code></p>
<p><strong>docker commit</strong> 提交某个镜像</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo docker commit -m &quot;new image&quot; -a &quot;my&quot; 433b23ce mydockeraccount&#x2F;test:webser &#x2F;&#x2F;将433b23ce这个镜像提交到docker hub中我的账号下名为test的仓库类目下并且使用:指定了镜像标签为webser</span><br><span class="line"></span><br><span class="line">-m 指定新创建的镜像的提交信息</span><br><span class="line">-a 指定该镜像的作者信息</span><br></pre></td></tr></table></figure>

<p><strong>docker build</strong> 使用Dockerfile文件构建镜像</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">可以使用 镜像名:标签 的格式可以设置镜像标签,如果没有指定标签自动设置latest标签</span><br><span class="line">-t 为新构建镜像设置仓库和名称</span><br><span class="line">-f 指定区别于默认的位置的Dockerfile,如 -f path&#x2F;to&#x2F;file,这个位置相对于构建环境上下文目录.</span><br><span class="line">--no-cache 关闭缓存功能,每次构建都重头开始,不使用缓存.</span><br></pre></td></tr></table></figure>

<p><strong>docker login</strong> 登录doker hub</p>
<p><code>sudo docker login</code>登录信息记录在<code>$HOME/.dockercfg</code>或<code>$HOME/.docker/config.json(1.7版本以上)</code>中</p>
<p><strong>docker logout</strong> 退出registry</p>
<p><strong>docker history</strong> 查看镜像构建的每一步都做了什么,是如何构建出来的</p>
<p><code>sudo docker history 22d48fg //列出该镜像构建时的每一层和Dockerfile指令</code></p>
<p><strong>docker port</strong> 查看容器的端口映射情况</p>
<p><code>sudo docker port ubuntu-test 80 //查看ubuntu-test的80端口映射到宿主哪个端口</code></p>
<p><strong>docker network</strong> docker networking 相关操作</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo docker network create mynet &#x2F;&#x2F;创建名为mynet的docker桥接网络,命令返回该网络的ID.创建overlay网络会允许我们在多宿主间通信.</span><br><span class="line"></span><br><span class="line">sudo docker network inspect mynet &#x2F;&#x2F;查看创建的docker网络</span><br><span class="line"></span><br><span class="line">sudo docker network ls &#x2F;&#x2F;列出当前系统中的所有docker网络</span><br><span class="line"></span><br><span class="line">sudo docker network connect mynet ubuntu-test&#x2F;&#x2F;添加正在运行的容器ubuntu-test到已有的网络mynet中</span><br><span class="line"></span><br><span class="line">sudo docker network disconnect mynet ubuntu-test&#x2F;&#x2F;从网络mynet中断开容器ubuntu-test</span><br><span class="line"></span><br><span class="line">docker run 时可以指定容器允许所使用的网络</span><br></pre></td></tr></table></figure>




<h2 id="Dockerfile文件"><a href="#Dockerfile文件" class="headerlink" title="Dockerfile文件"></a>Dockerfile文件</h2><p>Dockerfile使用DSL语法,所有指令都必须为大写.</p>
<p>Dockerfile是顺序执行的.</p>
<p>在构建环境(上下文)目录(即使用当前所处在的目录位置为构建环境)下,新建名为Dockerfile的文件.Dockerfile大致执行流程为:从基础镜像运行一个容器,每次执行一个指令修改并提交操作生成新的镜像层,在该镜像层基础上运行新的容器,再重复执行下一条指令.某一指令执行失败可以使用上一指令执行后的容器名称进行调试.</p>
<p>docker构建每一步都会提交为镜像,就使得之前构建过程中的镜像可以被当作缓存,再次执行构建操作时如果构建操作没有变化会略过构建而直接使用缓存.</p>
<p>构建环境下.dockeignore文件可以指定目录下那些文件不被当作构建环境中的上下文的一部分,类似git的gitignore.该文件使用go的filepath中的匹配规则.</p>
<p>每个Dockerfile的第一条指令必须是FROM.</p>
<p><strong>RUN</strong> </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">指定镜像被构建时运行的命令</span><br><span class="line"></span><br><span class="line">RUN pip install -r requirement.txt &#x2F;&#x2F;执行pip命令从requirement.txt文件中读取需要安装的依赖名并安装.</span><br><span class="line">RUN会在shell中默认使用&#96;&#x2F;bin&#x2F;sh -c &#96;作为执行命令的前缀</span><br><span class="line"></span><br><span class="line">推荐使用数组格式的RUN指令: RUN [ &quot;apt-get&quot;,&quot;install&quot;,&quot;-y&quot;,&quot;nginx&quot; ],数组语法</span><br></pre></td></tr></table></figure>

<p><strong>CMD</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">指定容器启动时要运行的命令</span><br><span class="line"></span><br><span class="line">CMD [ &quot;&#x2F;bin&#x2F;bash&quot;, &quot;-l&quot; ],使用数组语法,不指定时docker会在命令前加&#96;&#x2F;bin&#x2F;sh -c&#96;(-c 表示使用后续字符串作为命令而不是从标准输入读取命令),推荐使用数组语法. </span><br><span class="line">docker run可以覆盖CMD指令.</span><br></pre></td></tr></table></figure>

<p><strong>ENTRYPOINT</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">指定在运行时要运行的命令,且不会轻易被run指令覆盖.</span><br><span class="line"></span><br><span class="line">docker run指令中的参数被作为该命令的参数传递给ENTRYPOINT中的指令.</span><br><span class="line">可以同时使用CMD和ENTRYPOINT,指定启动时的默认行为:</span><br><span class="line">ENTRYPOINT [&quot;&#x2F;usr&#x2F;bin&#x2F;nginx&quot;]</span><br><span class="line">CMD [&quot;-g&quot;,&quot;daemon off&quot;]</span><br><span class="line">指定默认启动nginx并让nginx守护进程以前台方式运行(避免容器自动退出),docker run 命令以其他参数 如 -h 覆盖该指令行为.</span><br><span class="line">docker run 的--entrypoint 标志可以覆盖ENTRYPOINT</span><br></pre></td></tr></table></figure>

<p><strong>WORKDIR</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">指定一个工作目录,后续的ENTRYPOINT和CMD指令会在这个目录下执行.</span><br><span class="line"></span><br><span class="line">WORKDIR &#x2F;home</span><br><span class="line">docker run 的-w指令会在运行时覆盖工作目录</span><br></pre></td></tr></table></figure>

<p><strong>ENV</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">指定镜像构建过程中的环境变量.</span><br><span class="line"></span><br><span class="line">这些变量会永久保留到从这个镜像创建的任何容器.</span><br><span class="line">docker run 使用-e 传递环境变量</span><br><span class="line">ENV WWW &#x2F;var&#x2F;www&#x2F;html &#x2F;&#x2F;指定WWW变量代表&#x2F;var&#x2F;www&#x2F;html</span><br><span class="line">WORKDIR $WWW &#x2F;&#x2F;切换工作目录到&#x2F;var&#x2F;www&#x2F;html</span><br></pre></td></tr></table></figure>

<p><strong>USER</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">指定镜像以什么用户运行</span><br><span class="line"></span><br><span class="line">USER uid:gid</span><br><span class="line">USER user </span><br><span class="line">USER group </span><br><span class="line">&#x2F;&#x2F;指定用户和组或用户或组,不指定则默认使用root用户.</span><br><span class="line">docker run 使用-u 覆盖该指令</span><br></pre></td></tr></table></figure>

<p><strong>VOLUME</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">指定一个目录位置,用来向基于镜像创建的容器添加卷</span><br><span class="line"></span><br><span class="line">VOLUME [&quot;&#x2F;var&#x2F;www&#x2F;html&quot;]</span><br><span class="line">一个卷可以存在与多个容器内的特定目录,即可以共享,这个特定的目录会绕过联合文件系统.</span><br><span class="line">一个容器可以不和其他容器共享卷</span><br><span class="line">对卷的修改是立即生效的</span><br><span class="line">对卷的修改不会对镜像产生影响</span><br><span class="line">卷会一直存在直到没有任何容器再使用它.</span><br><span class="line">卷可以方便向镜像中添加数据代码等而不用提交新的镜像.</span><br><span class="line">可以使用数组方式指定多个卷VOLUME [&quot;&#x2F;var&#x2F;www&#x2F;html&quot;,&quot;&#x2F;tmp&quot;]</span><br></pre></td></tr></table></figure>

<p><strong>ADD</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">用来将构建环境下的文件和目录或URL位置对应的资源复制到镜像中.</span><br><span class="line"></span><br><span class="line">ADD subdir&#x2F;test.txt &#x2F;home&#x2F;test&#x2F;</span><br><span class="line">不能对构建环境以外的文件进行操作.</span><br><span class="line">docker通过地址的结尾字符来判断目标位置是文件还是目录,以&#x2F;结尾的均看做目录.</span><br><span class="line">ADD对于gzip,bzip,xz源文件会自动解压,与tar -x功能类似.如果目的地址已经存在同名文件或目录不会覆盖.如果目的位置不存在会创建全路径(包含路径中任何目录),新创建的文件和目录mod为0755,gid和uid为0.</span><br><span class="line">ADD指令会使得构建缓存机制变得无效.</span><br></pre></td></tr></table></figure>

<p><strong>COPY</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">类似ADD,COPY只在构建上下文中复制本地文件,不做提取和解压工作.</span><br><span class="line">目的地址必须是容器内的绝对路径.</span><br></pre></td></tr></table></figure>

<p><strong>LABEL</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(1.6版本以上)为docker镜像添加元数据,元数据以键值对形式出现,推荐所有元数据放在一列,以免创建多层镜像.</span><br><span class="line"></span><br><span class="line">LABEL ver&#x3D;&quot;1.1&quot; type&#x3D;&quot;date&quot;</span><br></pre></td></tr></table></figure>

<p><strong>STOPSIGNAL</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(1.9版本以上)设置停止容器时发送的系统调用信号,必须是内核系统调用表中的合法的数,如 SIGKILL,9</span><br></pre></td></tr></table></figure>

<p><strong>ARG</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(1.9版本以上)定义可以在docker build 命令运行时传递给构建的变量.构建时只需使用--build-arg标志即可.</span><br><span class="line"></span><br><span class="line">ARG build &#x2F;&#x2F;未指定build参数的默认值</span><br><span class="line">ARG target&#x3D;&#x2F;var&#x2F;www&#x2F;html &#x2F;&#x2F;指定了target参数的默认值</span><br><span class="line">docker预定义的ARG变量,无需在Dockerfile中定义:</span><br><span class="line">HTTP_PROXY</span><br><span class="line">http_proxy</span><br><span class="line">HTTPS_PROXY</span><br><span class="line">https_proxy</span><br><span class="line">FTP_PROXY</span><br><span class="line">ftp_proxy</span><br><span class="line">NO_PROXY</span><br><span class="line">no_proxy</span><br></pre></td></tr></table></figure>

<p><strong>ONBUILD</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">为镜像添加触发器,当一个镜像被用作其他镜像构建的基础镜像时会触发执行,在构建过程中插入新的指令.相当于这些指令紧跟在构建其他镜像的Dockerfile的FROM后面.</span><br><span class="line"></span><br><span class="line">ONBUILD ADD . &#x2F;app&#x2F;</span><br><span class="line">ONBUILD会顺序执行,并且只能被继承一次,不会出现在孙子镜像中.</span><br><span class="line">FROM,MAINTAINER,ONBUILD不能被用在ONBUILD中,以防递归.</span><br></pre></td></tr></table></figure>


<h2 id="Remote-API"><a href="#Remote-API" class="headerlink" title="Remote API"></a>Remote API</h2><p>docker守护进程提供remote api, 默认情况下会在宿主创建套接字<code>unix:///var/run/docker.sock</code></p>
<p><code>echo -e &quot;GET /info HTTP/1.0\r\n&quot; |sudo nc -U /var/run/dcoker.sock // 查询本地docker API</code></p>
<p>要启动docker API 需要使用-H给守护进程传递参数,可以修改守护进程的启动配置文件,将守护进程永久绑定到指定的网络接口上.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Ubuntu&#x2F;Debain:	&#x2F;etc&#x2F;default&#x2F;dcoker</span><br><span class="line">RedHat&#x2F;Fedora:	&#x2F;etc&#x2F;sysconfig&#x2F;docker</span><br><span class="line">使用systemd的版本:	&#x2F;usr&#x2F;lib&#x2F;systemd&#x2F;system&#x2F;docker.service</span><br></pre></td></tr></table></figure>
<p>可以使用POST请求来调用/container/create接入点来创建容器,等同于<code>docker run</code>:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">curl -X POST -H &quot;Content-Type: application&#x2F;json&quot; http:&#x2F;&#x2F;localhost:2375&#x2F;container&#x2F;create -d &#39;&#123;&quot;Image&quot;:&quot;ubuntu-test&quot;&#125;&#39;</span><br></pre></td></tr></table></figure>

<p>docker官网有<a href="http://docs.docker.com/reference/api/remote_api_client_libraries/" target="_blank" rel="noopener">docker Remote API客户端库</a>的完整列表.</p>
<p>Docker Remote API 可以使用TLS/SSL进行认证,确保安全.需要自己创建CA证书.</p>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>pythonic技巧</title>
    <url>/2020/06/07/pythonic-%E6%8A%80%E5%B7%A7/</url>
    <content><![CDATA[<h1 id="pythonic-技巧"><a href="#pythonic-技巧" class="headerlink" title="pythonic 技巧"></a>pythonic 技巧</h1><ol>
<li><p>赋值可以采用元组赋值方法: <code>a,b = 1, 2</code> , 函数的返回值也可是多值返回, <code>a, b = test(c)</code>这一点与golang很像, 支持多个, 对于数组赋值也可以通过序列解包来进行赋值<code>a,b = [1,2]</code></p>
</li>
<li><p>对于方法处理,可以进行多次嵌套, 如 <code>a.split(&#39;\n&#39;).strip()</code></p>
</li>
<li><p>if…else….可以进行三目运算,类似c语言, <code>a = b if a &gt; 10 else c</code></p>
<a id="more"></a></li>
<li><p>多值判断用 <code>if 70 &lt; a &lt; 90 :</code> 不用 <code>if a &gt; 70 and a &lt; 90</code> 或者使用<code>if a in (1,2,3):</code>判断多个条件, 判断空值或None 用<code>if a</code>而不是 <code>if len(a)&gt;0 or a != None</code>,判断多个and 或 or条件 可以使用 <code>if all(a&gt;60,b&gt;70):</code></p>
</li>
<li><p>for 循环 尽量使用推导式 <code>a= [x for x in b_list]</code>,同时list的下标和数值用 <code>for k,v in enumerate(a)</code>,推导式比较省内存,因为其默认就是使用的生成器的方式进行.</p>
</li>
<li><p>print 可以通过打印’\r’来不进行回车,从而实现刷新当前显示数据</p>
</li>
<li><p>lambda指定匿名函数,<code>filter(lambda x: x+=1, list_a)</code> 将list_a依次通过lambda函数处理 </p>
</li>
<li><p>yield 生成器迭代数据 </p>
 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fibs</span><span class="params">(n)</span>:</span></span><br><span class="line">	a,b,i =<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span></span><br><span class="line">	<span class="keyword">while</span> i&lt;n:</span><br><span class="line">		i=i+<span class="number">1</span></span><br><span class="line">		<span class="keyword">yield</span> a</span><br><span class="line">		a,b=b,a+b</span><br><span class="line">lres = ist(fibs(<span class="number">10</span>))</span><br></pre></td></tr></table></figure>
</li>
<li><p>装饰器定义切面函数,适用于日志,审计等场景</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def wraped_func(f):</span><br><span class="line">	def wrap(*args,**kwargs):</span><br><span class="line">		do_something</span><br><span class="line">		return f(*args,**kwargs)</span><br><span class="line">	return wrap</span><br><span class="line"></span><br><span class="line">@wraped_func</span><br><span class="line">def func():</span><br><span class="line">	pass</span><br></pre></td></tr></table></figure>
</li>
<li><p>调试python代码可以通过导入断点 <code>breakpoint()</code> (3.7+) <code>import pdb; pdb.set_trace()</code>(3.6-)</p>
</li>
<li><p>格式化字符串, 使用f,</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">n ,x &#x3D; 1,31  </span><br><span class="line">a &#x3D; f&quot;xxx &#123;n&#125; &#123;x&#x2F;10:.5f&#125; ddd&quot; </span><br><span class="line">输出:a &#x3D; &quot;xxx 1 3.10000 ddd&quot;</span><br></pre></td></tr></table></figure>
</li>
<li><p>排序list使用sorted(), 默认升序,指定reverse=True参数降序</p>
</li>
<li><p>使用set进行数据去重, 可以直接使用 set.add() 方法加入数据到set中,这样产生的数据没有重复, 这样比判断是否再list中再添加的方法时间消耗更低</p>
</li>
<li><p>使用get获取dict中的值并指定默认值,使用setdefault()设置字典项的默认值.</p>
</li>
</ol>
]]></content>
      <categories>
        <category>language</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>language</tag>
      </tags>
  </entry>
  <entry>
    <title>shell学习笔记</title>
    <url>/2020/06/07/shell-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="shell学习笔记"><a href="#shell学习笔记" class="headerlink" title=" shell学习笔记"></a> shell学习笔记</h1><ol>
<li><p>检测变量是否存在：<code>${varname? ERR:something}</code>若varname变量未定义则报错后面错误信息”ERR:…”</p>
</li>
<li><p>bash4.0 新特性: <code>{1..10..2}</code>从1自增到10每次加2</p>
<a id="more"></a>  </li>
<li><p><code>d{a,b,c}</code>代表da,db,dc</p>
</li>
<li><p><code>~+</code>代表PWD值/<code>~-</code>代表LODPWD值</p>
</li>
<li><p>bash 没有设置-f会支持文件名扩展类似正则:<code>* ? [ ]</code></p>
</li>
<li><p>bash 提示符带有颜色: <code>&quot;\e[0;34m ...  \e[m&quot;</code><br><code>\e[ 指示开始 0;34m代表颜色代码 \e[m 指示结束</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">0;30 黑色 </span><br><span class="line">0;34蓝色 </span><br><span class="line">0;32绿色 </span><br><span class="line">0;36 青色 </span><br><span class="line">0;31 红色 </span><br><span class="line">0;35 紫色 </span><br><span class="line">0;33 褐色</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>tput</code> 命令设置提示符 <code>bold</code>粗体 <code>rev</code>反转 <code>sgr0</code>关闭所有属性 <code>setaf</code>设置前色<code>setab</code> 设置背景色 0黑 1红 2绿 3黄 4蓝 5洋红 6青 7白</p>
</li>
<li><p><code>set -o</code>开启bash特性 +o关闭</p>
</li>
<li><p>linux不允许给目录创建硬链接<code>ln</code>不能对目录使用,只能加<code>-s</code>创建软连接</p>
</li>
<li><p><code>/dev/null</code>是linux的特殊dev文件,是一个黑洞,不想要的东西都可以写进这里.它读不出任何数据.</p>
</li>
<li><p><code>tar</code>可以加<code>--wildcards</code>与<code>-xvf</code>提取制定模式的一组文件或目录如 <code>--wildcards &#39;*.jpg&#39;</code></p>
</li>
<li><p><code>lsof</code>或<code>fuser</code>可以查看mount的文件系统被哪个进程占用</p>
</li>
<li><p><code>atq</code>与<code>at -l</code>功能相同</p>
</li>
<li><p><code>nohup command [arg]  &amp;</code> 运行一个对挂起免疫的后台任务</p>
</li>
<li><p>bash间接扩展参数:<code>${!B}</code>如果B的值是某个变量参数A的名字,那么该式值是参数A的值而不是B的值</p>
</li>
<li><p>bash内部变量:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">a. $BASH bash全路径; </span><br><span class="line">b. $IFS 内部字段分隔符,默认值:&quot;&lt;space&gt;&lt;tab&gt;&lt;newline&gt;&quot;;空格 tab 新行 ; </span><br><span class="line">c. $OSTYPE 操作系统类型 ;</span><br><span class="line">d. $SECONDS 脚本已运行秒数;</span><br><span class="line">e. $TMOUT 如非0则作为命令read的默认超时秒数; </span><br><span class="line">f. $UID 当前用户账号ID</span><br><span class="line">g. $LINENO shell脚本当前行号</span><br><span class="line">h. $FUNCNAME 当前执行调用堆栈的所有shell函数名数组,$&#123;FUNCNAME[0]&#125;代表当前正在执行shell函数名称,$&#123;FUNCNAME[1]&#125;代表调用			$&#123;FUNCNAME[0]&#125;的函数的名字</span><br><span class="line">i. $PS4 bash -x 时显示的默认+号值</span><br></pre></td></tr></table></figure>
</li>
<li><p>bash参数 </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">a. $1 $2 ... 10以上是用&#123;&#125; 即$&#123;10&#125; </span><br><span class="line">b. $* 代表$1c$2c.... c是IFS的第一个字符,默认空白 常用用法: for arg in $*</span><br><span class="line">c. &quot;$@&quot; 等价与 &quot;$1&quot; &quot;$2&quot;...每个都是分割的单词 常用用法: for arg in &quot;$@&quot;</span><br><span class="line">d. $&amp;#35; 参数个数</span><br><span class="line">e. $! 最后一次执行的后台命令进程号</span><br><span class="line">f. $0 shell脚本名称</span><br><span class="line">g. $? 最近一次前台执行命令的退出状态</span><br></pre></td></tr></table></figure>
</li>
<li><p>declare 申明变量 -i 代表整型 -r 只读 -p 显示属性和值 -a 申明数组 </p>
</li>
<li><p>数组也可又<code>$arr=(a1 b2 c3)</code>定义,引用数组必须加{}, @ <em>表示数组所有成员,如 `${arr[2]} /${arr[</em>]} `.不指定索引默认第一个元素 $arr值是a1</p>
</li>
<li><p>数字常量:0x开头表示16进制, 0开头表示8进制 , <code>BASE&amp;#35;NUMBER</code>表示BASE进制的数NUMBER 如<code>12&amp;#35;234</code> 表示12进制的234</p>
</li>
<li><p>let 进行算数运算<code>let &quot;i=i + 5&quot;</code></p>
</li>
<li><p>expr进行表达式求值并输出</p>
</li>
<li><p>shell返回的状态码0~255间整数,shell每行代码不多于80字符</p>
</li>
<li><p>[[]]仅在bash /zsh/ korn shell 中可用,[]在所有符合POSIX标准的shell下可用 </p>
</li>
<li><p>test命令:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1）判断表达式</span><br><span class="line">　　if test  (表达式为真)</span><br><span class="line">　　if test !表达式为假</span><br><span class="line">　　test 表达式1 –a 表达式2                  两个表达式都为真</span><br><span class="line">　　test 表达式1 –o 表达式2                 两个表达式有一个为真</span><br><span class="line">　　2）判断字符串</span><br><span class="line">　　test –n 字符串                                   字符串的长度非零</span><br><span class="line">　　test –z 字符串                                    字符串的长度为零</span><br><span class="line">　　test 字符串1＝字符串2                    字符串相等</span><br><span class="line">　　test 字符串1！＝字符串2               字符串不等</span><br><span class="line">　　3）判断整数</span><br><span class="line">　　test 整数1 –eq 整数2                        整数相等</span><br><span class="line">　　test 整数1 –ge 整数2                        整数1大于等于整数2</span><br><span class="line">　　test 整数1 –gt 整数2                         整数1大于整数2</span><br><span class="line">　　test 整数1 –le 整数2                         整数1小于等于整数2</span><br><span class="line">　　test 整数1 –lt 整数2                          整数1小于整数2</span><br><span class="line">　　test 整数1 –ne 整数2                        整数1不等于整数2</span><br><span class="line">　　4）判断文件</span><br><span class="line">　　test  File1 –ef  File2                            两个文件具有同样的设备号和i结点号</span><br><span class="line">　　test  File1 –nt  File2                            文件1比文件2 新</span><br><span class="line">　　test  File1 –ot  File2                            文件1比文件2 旧</span><br><span class="line">　　test –b File                                           文件存在并且是块设备文件</span><br><span class="line">　　test –c File                                           文件存在并且是字符设备文件</span><br><span class="line">　　test –d File                                           文件存在并且是目录</span><br><span class="line">　　test –e File                                           文件存在</span><br><span class="line">　　test –f File                                            文件存在并且是正规文件</span><br><span class="line">　　test –g File                                           文件存在并且是设置了组ID</span><br><span class="line">　　test –G File                                           文件存在并且属于有效组ID</span><br><span class="line">　　test –h File                                           文件存在并且是一个符号链接（同-L）</span><br><span class="line">　　test –k File                                           文件存在并且设置了sticky位</span><br><span class="line">　　test –b File                                           文件存在并且是块设备文件</span><br><span class="line">　　test –L File                                           文件存在并且是一个符号链接（同-h）</span><br><span class="line">　　test –o File                                           文件存在并且属于有效用户ID</span><br><span class="line">　　test –p File                                           文件存在并且是一个命名管道</span><br><span class="line">　　test –r File                                            文件存在并且可读</span><br><span class="line">　　test –s File                                           文件存在并且是一个套接字</span><br><span class="line">　　test –t FD                                             文件描述符是在一个终端打开的</span><br><span class="line">　　test –u File                                           文件存在并且设置了它的set-user-id位</span><br><span class="line">　　test –w File                                          文件存在并且可写</span><br><span class="line">　　test –x File                                           文件存在并且可执行</span><br></pre></td></tr></table></figure></li>
<li><p><code>break [n]</code>n表示跳出n层嵌套循环.没有n或n小于1,退出码0,否则退出码为n</p>
</li>
<li><p>linux下正在运行的进程,会在/proc下存在以进程号命名的子目录,<code>/proc/[PID]/fd</code>的每一个条目对应一个该进程打开的文件,用文件描述符命名,并软连接到实际文件</p>
</li>
<li><p>函数  </p>
<ol>
<li>创建函数一定要在调用函数之前</li>
<li>function_name() 或者 function name        //function是关键字 name 后面可以省略()<br>{<br>commands…<br>[return int;] 返回值0~255 没有则默认返回最后一条指令运行返回值<br>}</li>
<li>函数自己使用$1 $2 … 作为传递的参数 $* $@ 代表所有的传递的参数 $&#35;传递给函数参数个数</li>
<li>shell默认情况下所有变量都是全局变量,函数内可使用local定义内部变量,local只能在函数体内使用</li>
<li>在脚本中加载函数文件中的函数 使用 点好. 或者source如: . /path/function.sh 或source /path/function.sh</li>
<li>调用函数直接输入名称,不加() </li>
<li>&amp;可以将函数放在后台运行</li>
</ol>
</li>
<li><p>bash正则</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">*： 代表 0 个或者多个任意字符</span><br><span class="line">?： 代表一定有一个的任意字符</span><br><span class="line">[]： 代表一定有一个在括号内的字符（非任意字符）。例如[abcd]代表一定有一个字符，可能是 abcd 这四个选项的任意一个。</span><br><span class="line">[-]：若邮件韩在括号内时，代表在编码顺序内的所有自负。例如：[0-9]代表 0 到 9 之间的所有数字，因为数字的语系编码是连续的。</span><br><span class="line">[^]： 若括号内的第一个字符为指数字符(^)，那表示反向选择，例如：[^abc]代表一定有一个字符，只要是非 abc 的其他字符就可以。</span><br><span class="line">^：匹配行首位置</span><br><span class="line">$：匹配行尾位置</span><br><span class="line">.：匹配任意祖父</span><br><span class="line">*：对*之前的匹配整体或字符匹配任意次（包括 0 次）</span><br><span class="line">\?：对\?之前的匹配整体或字符匹配 0 次或 1 次</span><br><span class="line">\&#123;n\&#125;: 对 \ &#123; 之前的匹配整体或字符匹配 n 次</span><br><span class="line">\&#123;m,\&#125;: 对 \ &#123; 之前的匹配整体或字符匹配至少 m 次</span><br><span class="line">\&#123;m,n&#125;: 对 \ &#123; 之前的匹配整体或字符匹配 m 到 n 次</span><br><span class="line">\&lt;\&gt;匹配单词边界,如:\&lt;the\&gt;只匹配 the 不匹配then</span><br><span class="line">[abcdef]: 对单字符而言匹配[]中的字符</span><br><span class="line">[a-z]： 对单字符而言，匹配任意一个小写字母</span><br><span class="line">[^a-z]：不匹配括号中的内容</span><br><span class="line">+ :重复『一个或一个以上』的前一个 RE 字符,与*类似 但不包括0个字符的情况</span><br><span class="line">?：『零个或一个』的前一个 RE 字符</span><br><span class="line">|：用或( or )的方式找出数个字串</span><br><span class="line">()：找出『群组』字串与| 一起使用</span><br><span class="line">()+：多个重复群组的判别</span><br></pre></td></tr></table></figure>

<p>POSIX字符类:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[:alnum:]	字母数字字符</span><br><span class="line">[:alpha:]	字母字符</span><br><span class="line">[:cntrl:]	控制字符</span><br><span class="line">[:digit:]	数字字符</span><br><span class="line">[:graph:]	非空白字符(非空格、控制字符等)</span><br><span class="line">[:lower:]	小写字母</span><br><span class="line">[:print:]	与[:graph:]相似，但是包含空格字符</span><br><span class="line">[:punct:]	标点字符</span><br><span class="line">[:space:]	所有的空白字符(换行符、空格、制表符)</span><br><span class="line">[:upper:]	大写字母</span><br><span class="line">[:xdigit:]	允许十六进制的数字(0-9a-fA-F)</span><br></pre></td></tr></table></figure>
</li>
<li><p>关闭脚本case语句对参数大小写敏感:在case前加入语句shopt -s nocasematch 重新打开用 shopt -u nocasematch</p>
</li>
<li><p>shift [n] 命令向左移动参数变量,n代表每次移动位数, shift后一般加对$?的值做判断语句来检查shift是否被执行</p>
</li>
<li><p>getopts (bash内置)的</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">a. 使用形式是：getopts option_string variable.getopts一共有两个参数，第一个是-a这样的选项，第二个参数是 hello这样的参数。</span><br><span class="line">b. 选项之间可以通过冒号:进行分隔，也可以直接相连接，：表示选项后面必须带有参数，如果没有可以不加实际值进行传递.</span><br><span class="line">c. 当optstring以”:”开头时，getopts会区分invalid option错误和miss option argument错误。</span><br><span class="line">d. 如果optstring不以”:“开头，invalid option错误和miss option argument错误都会使varname被设成?，$OPTARG是出问题的option。</span><br></pre></td></tr></table></figure></li>
<li><p>getopt(命令行命令) 命令的选项说明：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-a 使getopt长参数支持&quot;-&quot;符号打头，必须与-l同时使用</span><br><span class="line">-l 后面接getopt支持长参数列表.选项用逗号分割,&quot;:&quot;表示选项需要一个参数,&quot;::&quot;表示选项有个可选参数</span><br><span class="line">-n program如果getopt处理参数返回错误，会指出是谁处理的这个错误，这个在调用多个脚本时，很有用</span><br><span class="line">-o 后面接短参数列表，这种用法与getopts类似.每个字符代表一个选项,&quot;:&quot;表示选项需要一个参数,&quot;::&quot;表示选项有个可选参数</span><br><span class="line">-u 不给参数列表加引号，默认是加引号的（不使用-u选项），例如在加不引号的时候 --longopt &quot;select * from db1.table1&quot; $2只会取到select ，而不是完整的SQL语句。</span><br></pre></td></tr></table></figure>
<p>使用eval 的目的是为了防止参数中有shell命令，被错误的扩展。<br>样例:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ARGV&#x3D;($(getopt -o 短选项1[:]短选项2[:]...[:]短选项n -l 长选项1,长选项2,...,长选项n -- &quot;$@&quot;))</span><br><span class="line">eval set -- &quot;$ARGV&quot;</span><br><span class="line">while true</span><br><span class="line"> do</span><br><span class="line">    case &quot;$1&quot; in</span><br><span class="line">     -短选项1|--长选项1)</span><br><span class="line">         process</span><br><span class="line">        shift</span><br><span class="line">        ;;</span><br><span class="line">    -短选项2|--长选项2)</span><br><span class="line">         &amp;#35; 获取选项</span><br><span class="line">         opt &#x3D; $2</span><br><span class="line">         process</span><br><span class="line">        shift 2</span><br><span class="line">        ;;</span><br><span class="line">     ......</span><br><span class="line">    -短选项3|--长选项3)</span><br><span class="line">         process</span><br><span class="line">         ;;</span><br><span class="line">     --)</span><br><span class="line"> break</span><br><span class="line">;;</span><br><span class="line"> esac</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></li>
<li><p>read 读入用户输入 -p 在输入前显示信息 -t 输入超时设置 -s隐藏用户输入 </p>
</li>
<li><p>重定向:<br>a. cat将输出接管道|进行输入数据的方法会不好,最好让你的程序从标准输入读取数据用&lt;,这样用户就可以使用重定向来获取数据.<br>b. 从文本输入用&lt;&lt;EOF格式,结束标识是EOF,必须写在行首.<br>c. &lt;&lt;&lt;用于输入重定向的普通字符串,后面接的就是要输入的字符<br>d. 0 输入 1 输出 2错误<br>e. 同时重定向 “&amp;&gt;” “&gt;&amp;” “2&gt;&amp;1” 追加用 &gt;&gt;<br>f. 在shell中最多可以有9个打开的文件描述符0-8.exec 用于操作文件描述符,如exec 2&gt;err.log.符号&lt;&amp;可以复制一个输入文件描述符，符号&gt;&amp;可以复制一个输出描述符。exec n&lt;&amp;- 关闭文件描述符.exec [n] &lt;&gt;file 打开读写文件</p>
</li>
<li><p>管道|与重定向的区别是,管道是将第一个命令的输出作为第二个的输入,而重定向是将命令与文件链接.</p>
</li>
<li><p>常用的管道过滤命令: awk,cut, grep, tar , head 取文件开头,paste 合并文件行, sed ,sort 行排序, split 文件分割, strings 打印文件中可打印的字符串, tac 与cat相反 倒序显示文件,tail 显示文件结尾 , tee 从标准输入读取内容并写入标准文件或输出, tr 转换或删除字符, uniq 报告或忽略重复的行, wc 统计行数字数等,column进行输出的表格格式化.</p>
</li>
<li><p>posix信号:<br>在linux下的:       </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">   1) SIGHUP	 2) SIGINT	 3) SIGQUIT	 4) SIGILL	 5) SIGTRAP</span><br><span class="line"> 6) SIGABRT	 7) SIGBUS	 8) SIGFPE	 9) SIGKILL	10) SIGUSR1</span><br><span class="line">11) SIGSEGV	12) SIGUSR2	13) SIGPIPE	14) SIGALRM	15) SIGTERM</span><br><span class="line">16) SIGSTKFLT	17) SIGCHLD	18) SIGCONT	19) SIGSTOP	20) SIGTSTP</span><br><span class="line">21) SIGTTIN	22) SIGTTOU	23) SIGURG	24) SIGXCPU	25) SIGXFSZ</span><br><span class="line">26) SIGVTALRM	27) SIGPROF	28) SIGWINCH	29) SIGIO	30) SIGPWR</span><br><span class="line">31) SIGSYS	34) SIGRTMIN	35) SIGRTMIN+1	36) SIGRTMIN+2	37) SIGRTMIN+3</span><br><span class="line">38) SIGRTMIN+4	39) SIGRTMIN+5	40) SIGRTMIN+6	41) SIGRTMIN+7	42) SIGRTMIN+8</span><br><span class="line">43) SIGRTMIN+9	44) SIGRTMIN+10	45) SIGRTMIN+11	46) SIGRTMIN+12	47) SIGRTMIN+13</span><br><span class="line">48) SIGRTMIN+14	49) SIGRTMIN+15	50) SIGRTMAX-14	51) SIGRTMAX-13	52) SIGRTMAX-12</span><br><span class="line">53) SIGRTMAX-11	54) SIGRTMAX-10	55) SIGRTMAX-9	56) SIGRTMAX-8	57) SIGRTMAX-7</span><br><span class="line">58) SIGRTMAX-6	59) SIGRTMAX-5	60) SIGRTMAX-4	61) SIGRTMAX-3	62) SIGRTMAX-2</span><br><span class="line">63) SIGRTMAX-1	64) SIGRTMAX	</span><br><span class="line">信号	     	取值		默认动作	含义（发出信号的原因）</span><br><span class="line">SIGHUP		1	Term	终端的挂断或进程死亡</span><br><span class="line">SIGINT		2	Term	来自键盘的中断信号</span><br><span class="line">SIGQUIT		3	Core	来自键盘的离开信号</span><br><span class="line">SIGILL		4	Core	非法指令</span><br><span class="line">SIGABRT	6	Core	来自abort的异常信号</span><br><span class="line">SIGFPE		8	Core	浮点例外</span><br><span class="line">SIGKILL		9	Term	杀死</span><br><span class="line">SIGSEGV	11	Core	段非法错误(内存引用无效)</span><br><span class="line">SIGPIPE		13	Term	管道损坏：向一个没有读进程的管道写数据</span><br><span class="line">SIGALRM	14	Term	来自alarm的计时器到时信号</span><br><span class="line">SIGTERM	15	Term	终止</span><br><span class="line">SIGUSR1	30,10,16	Term	用户自定义信号1</span><br><span class="line">SIGUSR2	31,12,17	Term	用户自定义信号2</span><br><span class="line">SIGCHLD	20,17,18	Ign	子进程停止或终止</span><br><span class="line">SIGCONT	19,18,25	Cont	如果停止，继续执行</span><br><span class="line">SIGSTOP	17,19,23	Stop	非来自终端的停止信号</span><br><span class="line">SIGTSTP		18,20,24	Stop	来自终端的停止信号</span><br><span class="line">SIGTTIN		21,21,26	Stop	后台进程读终端</span><br><span class="line">SIGTTOU	22,22,27	Stop	后台进程写终端</span><br><span class="line">　			　</span><br><span class="line">SIGBUS		10,7,10	Core	总线错误（内存访问错误）</span><br><span class="line">SIGPOLL		Term	Pollable	事件发生(Sys V)，与SIGIO同义</span><br><span class="line">SIGPROF	27,27,29	Term	统计分布图用计时器到时</span><br><span class="line">SIGSYS		12,-,12	Core	非法系统调用(SVr4)</span><br><span class="line">SIGTRAP	5		Core	跟踪&#x2F;断点自陷</span><br><span class="line">SIGURG		16,23,21	Ign	socket紧急信号(4.2BSD)</span><br><span class="line">SIGVTALRM	26,26,28	Term	虚拟计时器到时(4.2BSD)</span><br><span class="line">SIGXCPU	24,24,30	Core	超过CPU时限(4.2BSD)</span><br><span class="line">SIGXFSZ		25,25,31	Core	超过文件长度限制(4.2BSD)</span><br><span class="line">　			　</span><br><span class="line">SIGIOT		6		Core	IOT自陷，与SIGABRT同义</span><br><span class="line">SIGEMT		7,-,7		Term</span><br><span class="line">SIGSTKFLT	-,16,-	Term	协处理器堆栈错误(不使用)</span><br><span class="line">SIGIO		23,29,22	Term	描述符上可以进行I&#x2F;O操作</span><br><span class="line">SIGCLD		-,-,18	Ign	与SIGCHLD同义</span><br><span class="line">SIGPWR		29,30,19	Term	电力故障(System V)</span><br><span class="line">SIGINFO		29,-,-			与SIGPWR同义</span><br><span class="line">SIGLOST	-,-,-		Term	文件锁丢失</span><br><span class="line">SIGWINCH	28,28,20	Ign	窗口大小改变(4.3BSD, Sun)</span><br><span class="line">SIGUNUSED	-,31,-	Term	未使用信号(will be SIGSYS)</span><br></pre></td></tr></table></figure>
<p>一些信号的取值是硬件结构相关的（一般alpha和sparc架构用第一个值，i386、ppc和sh架构用中间值，mips架构用第三个值， - 表示相应架构的取值未知）。<br>SIGKILL和SIGSTOP信号不能被挂钩、阻塞或忽略。</p>
</li>
<li><p>disown -h %1 会阻止shell 向后台作业1发送SIGHUP信号,这时退出shell作业依旧会执行,如果用shopt打开了shell内部的huponexit,会在退出shell时默认向所有作业发送SIGHUP</p>
</li>
<li><p>进程的状态:<code>D 不可中断休眠 R运行 S 休眠 T 停止 Z 僵死</code></p>
</li>
<li><p>bash下:<br><code>Ctrl + C</code> 中断信号,发送SIGINT.<br><code>Ctrl+Y</code> 延时挂起,使运行的进程在尝试从终端读取数据时停止,控制权返回shell.<br><code>Ctrl+Z</code> 挂起信号,发送SIGTSTP,返回shell</p>
</li>
<li><p><code>(command1;command2;...)</code>内嵌在圆括号内部的命令列表,作为一个shell进程的子shell进程运行,其变量对外不可见,运行环境变量可设置不同.</p>
</li>
<li><p>捕获:<br>a. <code>trap command signal [signal ...]</code>捕获特定的信号进行处理 如<code>trap &quot;kill -9 $self &quot; SIGHUP</code> (在收到sinhup信号后立即杀死自己)<br>b. trap语句中若””内为空则不做响应,可用于屏蔽Ctrl+C 等<br>c. <code>trap - signal...</code> 用于重置默认模式,移除信号的捕获.</p>
</li>
</ol>
<h2 id="sed手册"><a href="#sed手册" class="headerlink" title="sed手册"></a>sed手册</h2><p><a href="https://www.gnu.org/software/sed/manual/sed.html" target="_blank" rel="noopener">参考站点</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@www ~]&amp;#35; sed [-nefr] [动作]</span><br><span class="line">选项与参数：</span><br><span class="line">-n ：使用安静(silent)模式。在一般 sed 的用法中，所有来自 STDIN 的数据一般都会被列出到终端上。但如果加上 -n 参数后，则只有经过sed 特殊处理的那一行(或者动作)才会被列出来。</span><br><span class="line">-e ：直接在命令列模式上进行 sed 的动作编辑；</span><br><span class="line">-f ：直接将 sed 的动作写在一个文件内， -f filename 则可以运行 filename 内的 sed 动作；</span><br><span class="line">-r ：sed 的动作支持的是延伸型正规表示法的语法。(默认是基础正规表示法语法)</span><br><span class="line">-i ：直接修改读取的文件内容，而不是输出到终端。</span><br><span class="line">动作说明： [n1[,n2]]function</span><br><span class="line">n1, n2 ：不见得会存在，一般代表『选择进行动作的行数』，举例来说，如果我的动作是需要在 10 到 20 行之间进行的，则『 10,20[动作行为] 』</span><br><span class="line">function：</span><br><span class="line">a ：新增， a 的后面可以接字串，而这些字串会在新的一行出现(目前的下一行)～</span><br><span class="line">c ：取代， c 的后面可以接字串，这些字串可以取代 n1,n2 之间的行！</span><br><span class="line">d ：删除，因为是删除啊，所以 d 后面通常不接任何咚咚；</span><br><span class="line">i ：插入， i 的后面可以接字串，而这些字串会在新的一行出现(目前的上一行)；</span><br><span class="line">p ：列印，亦即将某个选择的数据印出。通常 p 会与参数 sed -n 一起运行～</span><br><span class="line">s ：取代，可以直接进行取代的工作哩！通常这个 s 的动作可以搭配正规表示法！例如 1,20s&#x2F;old&#x2F;new&#x2F;g 就是啦！</span><br></pre></td></tr></table></figure>

<h2 id="awk"><a href="#awk" class="headerlink" title="awk "></a>awk </h2><p><a href="https://www.gnu.org/software/gawk/manual/gawk.html" target="_blank" rel="noopener">参考站点</a><br><code>awk &#39;{pattern + action}&#39; {filenames}</code><br>尽管操作可能会很复杂，但语法总是这样，其中<code>pattern</code>表示 AWK 在数据中查找的内容，而 <code>action</code>是在找到匹配内容时所执行的一系列命令。花括号<code>（{}）</code>不需要在程序中始终出现，但它们用于根据特定的模式对一系列指令进行分组。 pattern就是要表示的正则表达式，用斜杠括起来。<br>awk语言的最基本功能是在文件或者字符串中基于指定规则浏览和抽取信息，awk抽取信息后，才能进行其他文本操作。完整的awk脚本通常用来格式化文本文件中的信息。<br>通常，awk是以文件的一行为处理单位的。awk每接收文件的一行，然后执行相应的命令，来处理文本。<br>模式可以是以下任意一个：<code>/正则表达式/</code>：使用通配符的扩展集。 关系表达式：使用运算符进行操作，可以是字符串或数字的比较测试。 模式匹配表达式：用运算符<del>（匹配）和</del>!（不匹配）。 BEGIN语句块、pattern语句块、END语句块.</p>
<h2 id="set"><a href="#set" class="headerlink" title="set --"></a><code>set --</code></h2><p>  表示:”If  no  arguments follow this option, then the positional parameters are unset.  Otherwise, the positional parameters are set  to the args, even if some of them begin with a -.”</p>
<h2 id="shell-调用其他脚本"><a href="#shell-调用其他脚本" class="headerlink" title="shell 调用其他脚本"></a>shell 调用其他脚本</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"> 使用.&#x2F;1.sh 或者 sh 1.sh 执行后使用exit退出并返回 ,</span><br><span class="line"> . 1.sh 或 export 1.sh 执行后用return返回.</span><br><span class="line"> </span><br><span class="line">shell脚本中的函数类似使用.&#x2F;1.sh方式执行的,有输入变量和返回但返回用return</span><br><span class="line"></span><br><span class="line">所有shell return只能返回数字,如果需要返回字符串,在func中使用echo.</span><br><span class="line"></span><br><span class="line">用&quot;.&quot;或者export执行的相当于本脚本执行,变量通用.无须返回.</span><br></pre></td></tr></table></figure>

<h2 id="echo和printf命令"><a href="#echo和printf命令" class="headerlink" title="echo和printf命令"></a>echo和printf命令</h2><p><code>echo -e &quot;1\t2\t3&quot;</code><br>显示结果为<code>123</code><br>echo 会自动在输出结尾加上一个\n回车,但是printf不会。<br>echo的-e命令表示需要转义，把\t转换成tab空格，-n命令会忽略输出结尾的回车。</p>
<p><strong><em>echo打印彩色输出：</em></strong> <code>echo -e &quot;\e[1;31m this is red \e[0m&quot;</code><br>其中\e[1;31m表示颜色开始，\e[0m表示重置即结束。31代表红色，修改数字对应不同颜色：黑色30，红色31，绿色32，黄色33，蓝色34，洋红35，青色36，白色37。</p>
<p>print命令和c语言的类似，<br><code>printf &quot;%-5s %-6.2f&quot; hello 43.2222</code>表示输出<code>hello 43.22</code>，<br>-表示左对齐，否组默认右对齐，数字是格式化位数。</p>
<p><code>var=value</code>和<code>var = value</code> 不同，前者是赋值，后者是等于比较操作,注意中间的空格区分。</p>
<p><strong><em>获取字符串长度</em></strong><br>采用<code>${&amp;#35;var}</code> var表示所要获取的字符串<br>例如：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">var=1234567890</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;&amp;#35;var&#125;</span></span><br></pre></td></tr></table></figure>
<p>输出：<code>&gt;10</code></p>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>shell</tag>
      </tags>
  </entry>
  <entry>
    <title>字符串拼接性能对比</title>
    <url>/2020/06/07/%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%8B%BC%E6%8E%A5/</url>
    <content><![CDATA[<h1 id="字符串拼接"><a href="#字符串拼接" class="headerlink" title="字符串拼接"></a>字符串拼接</h1><p>last update: 5/21/19 10:10 PM</p>
<p>前两天需要大量做字符串的拼接,生成html文件.对于如何快速生成字符串进行了研究和测试. </p>
<a id="more"></a>
<h2 id="python"><a href="#python" class="headerlink" title="python"></a>python</h2><p>在python中最先想到的拼接方式就是<code>c=c+a</code>很直观.另外发现python还提供了很多种字符串的操作:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">c&#x3D;c+a</span><br><span class="line"></span><br><span class="line">c+&#x3D;a</span><br><span class="line"></span><br><span class="line">&quot;&#123;&#125;&#123;&#125;&quot;.format(c,a)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">c&#x3D;[] c+&#x3D;[a] &quot;&quot;.join(c)</span><br></pre></td></tr></table></figure>
<p>测试代码:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">	# coding: utf-8</span><br><span class="line"></span><br><span class="line">import time</span><br><span class="line"></span><br><span class="line">count &#x3D; 20000</span><br><span class="line"></span><br><span class="line">beg &#x3D; time.time()</span><br><span class="line">a &#x3D; &quot;this is a test sting a&quot;</span><br><span class="line">b &#x3D; &quot;this is another test string 测试测试测试ing&quot;</span><br><span class="line">res &#x3D; &#39;&#39;</span><br><span class="line"></span><br><span class="line">for i in range(count):</span><br><span class="line">    if i%2 &#x3D;&#x3D; 0:</span><br><span class="line">        res &#x3D; res + a + &quot;:&quot;+str(i)</span><br><span class="line">    else:</span><br><span class="line">        res &#x3D; res + b+ &quot;:&quot;+str(i)</span><br><span class="line">print(&quot;time cost +: %s&quot;,time.time()-beg)</span><br><span class="line"></span><br><span class="line">beg &#x3D; time.time()</span><br><span class="line">for i in range(count):</span><br><span class="line">    if i%2 &#x3D;&#x3D; 0:</span><br><span class="line">        res +&#x3D; a + &quot;:&quot;+str(i)</span><br><span class="line">    else:</span><br><span class="line">        res +&#x3D; b+ &quot;:&quot;+str(i)</span><br><span class="line">print(&quot;time cost +&#x3D;: %s&quot;,time.time()-beg)</span><br><span class="line"></span><br><span class="line">beg &#x3D; time.time()</span><br><span class="line">for i in range(count):</span><br><span class="line">    if i%2 &#x3D;&#x3D; 0:</span><br><span class="line">        res &#x3D; &quot;&#123;&#125; &#123;&#125; &#123;&#125; &#123;&#125;&quot;.format(res,a,&quot;:&quot;,str(i)) </span><br><span class="line">    else:</span><br><span class="line">        res &#x3D; &quot;&#123;&#125; &#123;&#125; &#123;&#125; &#123;&#125;&quot;.format(res,b,&quot;:&quot;,str(i)) </span><br><span class="line">print(&quot;time cost format: %s&quot;,time.time()-beg)</span><br><span class="line"></span><br><span class="line">res &#x3D; []</span><br><span class="line">beg &#x3D; time.time()</span><br><span class="line">for i in range(count):</span><br><span class="line">    if i%2 &#x3D;&#x3D; 0:</span><br><span class="line">        res+&#x3D;[a,&quot;:&quot;,str(i)]</span><br><span class="line">    else:</span><br><span class="line">        res+&#x3D;[b,&quot;:&quot;,str(i)]</span><br><span class="line">result &#x3D; &quot; &quot;.join(res)</span><br><span class="line">print(&quot;time cost join list: %s&quot;,time.time()-beg)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">res &#x3D; 1</span><br><span class="line">beg &#x3D; time.time()</span><br><span class="line">for i in range(count):</span><br><span class="line">    if i%2 &#x3D;&#x3D; 0:</span><br><span class="line">        res &#x3D; res + i</span><br><span class="line">    else:</span><br><span class="line">        res &#x3D; res + i&#x2F;2 </span><br><span class="line">print(&quot;time cost + num : %s&quot;,time.time()-beg)</span><br><span class="line"></span><br><span class="line">res &#x3D; 1</span><br><span class="line">beg &#x3D; time.time()</span><br><span class="line">for i in range(count):</span><br><span class="line">    if i%2 &#x3D;&#x3D; 0:</span><br><span class="line">        res +&#x3D; i</span><br><span class="line">    else:</span><br><span class="line">        res +&#x3D; i&#x2F;2 </span><br><span class="line">print(&quot;time cost +&#x3D; num: %s&quot;,time.time()-beg)</span><br></pre></td></tr></table></figure>

<p>执行时间对比:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">─$ python test.py </span><br><span class="line">(&#39;time cost +: %s&#39;, 3.4623711109161377)</span><br><span class="line">(&#39;time cost +&#x3D;: %s&#39;, 0.015604972839355469)</span><br><span class="line">(&#39;time cost format: %s&#39;, 3.1990790367126465)</span><br><span class="line">(&#39;time cost join list: %s&#39;, 0.013344049453735352)</span><br><span class="line">(&#39;time cost + num : %s&#39;, 0.005431175231933594)</span><br><span class="line">(&#39;time cost +&#x3D; num: %s&#39;, 0.005048036575317383)</span><br><span class="line"></span><br><span class="line">╰─$ python3 test.py</span><br><span class="line">time cost +: %s 6.251662492752075</span><br><span class="line">time cost +&#x3D;: %s 0.02083301544189453</span><br><span class="line">time cost format: %s 52.249574184417725</span><br><span class="line">time cost join list: %s 0.020740747451782227</span><br><span class="line">time cost + num : %s 0.005892515182495117</span><br><span class="line">time cost +&#x3D; num: %s 0.005952358245849609</span><br></pre></td></tr></table></figure>


<p>同样对于golang</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">	&quot;fmt&quot;</span><br><span class="line">	&quot;strings&quot;</span><br><span class="line">	&quot;time&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">var count &#x3D; 50000</span><br><span class="line"></span><br><span class="line">var a &#x3D; &quot;this is a test&quot;</span><br><span class="line">var b &#x3D; &quot;this is another test&quot;</span><br><span class="line">var c string</span><br><span class="line"></span><br><span class="line">func testAdd() &#123;</span><br><span class="line">	t :&#x3D; time.Now()</span><br><span class="line">	for i :&#x3D; 0; i &lt; count; i++ &#123;</span><br><span class="line">		c &#x3D; c + a + b</span><br><span class="line">	&#125;</span><br><span class="line">	fmt.Println(&quot;test add:&quot;, time.Now().Sub(t))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func testPlus() &#123;</span><br><span class="line">	t :&#x3D; time.Now()</span><br><span class="line">	for i :&#x3D; 0; i &lt; count; i++ &#123;</span><br><span class="line">		c +&#x3D; a + b</span><br><span class="line">	&#125;</span><br><span class="line">	fmt.Println(&quot;test plus:&quot;, time.Now().Sub(t))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func testArray() &#123;</span><br><span class="line">	d :&#x3D; []string&#123;&#125;</span><br><span class="line">	t :&#x3D; time.Now()</span><br><span class="line">	for i :&#x3D; 0; i &lt; count; i++ &#123;</span><br><span class="line">		d &#x3D; append(d, a, b)</span><br><span class="line">	&#125;</span><br><span class="line">	strings.Join(d, &quot;&quot;)</span><br><span class="line">	fmt.Println(&quot;test array:&quot;, time.Now().Sub(t))</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line">	testAdd()</span><br><span class="line">	testPlus()</span><br><span class="line">	testArray()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>测试结果:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">╰─$ go run testgo&#x2F;string_plus.go </span><br><span class="line">test add: 6.464752503s</span><br><span class="line">test plus: 19.349181857s</span><br><span class="line">test array: 10.107554ms</span><br><span class="line"></span><br><span class="line">─$ go run testgo&#x2F;string_plus.go &#x2F;&#x2F;count&#x3D;20000</span><br><span class="line">test add: 1.046215762s</span><br><span class="line">test plus: 3.233030314s</span><br><span class="line">test array: 4.82766ms</span><br></pre></td></tr></table></figure>

<p>综合上述测试可见, 对于大量字符串拼接的需求, 使用数组(array/list)存放需要进行拼接的字符串,之后再使用join()拼接,效率高很多.<br>究其原因,因为数组是指针连接的,产生时使用新的指针指向需要连接的数据,go在append时会自动增加cap为两倍,分配新的内存空间,而数组存放的是指向实际底层数据的指针,字符串数据并未重新生成, 但是对于+拼接方法,重新产生一个新的字符串,需要分配新的内存空间,因此会占用很多时间.<br>同时也发现python3对于字符串的拼接并不比python2做的好..</p>
<p>另外 go字符串不要使用+= 而python 可以适当使用+=,其性能仅差于list 同时go语言的性能的确远高于python</p>
<hr>
<p>别人的测试代码:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from cStringIO import StringIO</span><br><span class="line">import timing, commands, os</span><br><span class="line">from sys import argv</span><br><span class="line"></span><br><span class="line">def method1():</span><br><span class="line">	out_str &#x3D; &#39;&#39;</span><br><span class="line">	for num in xrange(loop_count):</span><br><span class="line">		out_str +&#x3D; &#96;num&#96;</span><br><span class="line">	ps_stats()</span><br><span class="line">	return out_str</span><br><span class="line"></span><br><span class="line">def method2():</span><br><span class="line">	from UserString import MutableString</span><br><span class="line">	out_str &#x3D; MutableString()</span><br><span class="line">	for num in xrange(loop_count):</span><br><span class="line">		out_str +&#x3D; &#96;num&#96;</span><br><span class="line">	ps_stats()</span><br><span class="line">	return out_str</span><br><span class="line"></span><br><span class="line">def method3():</span><br><span class="line">	from array import array</span><br><span class="line">	char_array &#x3D; array(&#39;c&#39;)</span><br><span class="line">	for num in xrange(loop_count):</span><br><span class="line">		char_array.fromstring(&#96;num&#96;)</span><br><span class="line">	ps_stats()</span><br><span class="line">	return char_array.tostring()</span><br><span class="line"></span><br><span class="line">def method4():</span><br><span class="line">	str_list &#x3D; []</span><br><span class="line">	for num in xrange(loop_count):</span><br><span class="line">		str_list.append(&#96;num&#96;)</span><br><span class="line">	out_str &#x3D; &#39;&#39;.join(str_list)</span><br><span class="line">	ps_stats()</span><br><span class="line">	return out_str</span><br><span class="line"></span><br><span class="line">def method5():</span><br><span class="line">	file_str &#x3D; StringIO()</span><br><span class="line">	for num in xrange(loop_count):</span><br><span class="line">		file_str.write(&#96;num&#96;)</span><br><span class="line">	out_str &#x3D; file_str.getvalue()</span><br><span class="line">	ps_stats()</span><br><span class="line">	return out_str</span><br><span class="line"></span><br><span class="line">def method6():</span><br><span class="line">	out_str &#x3D; &#39;&#39;.join([&#96;num&#96; for num in xrange(loop_count)])</span><br><span class="line">	ps_stats()</span><br><span class="line">	return out_str</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def ps_stats():</span><br><span class="line">	global process_size</span><br><span class="line">	ps &#x3D; commands.getoutput(&#39;ps -up &#39; + &#96;pid&#96;)</span><br><span class="line">	process_size &#x3D; ps.split()[15]</span><br><span class="line"></span><br><span class="line">def call_method(num):</span><br><span class="line">	global process_size</span><br><span class="line">	timing.start()</span><br><span class="line">	z &#x3D; eval(&#39;method&#39; + str(num))()</span><br><span class="line">	timing.finish()</span><br><span class="line">	print &quot;method&quot;, num</span><br><span class="line">	print &quot;time&quot;, float(timing.micro()) &#x2F; 1000000</span><br><span class="line">	print &quot;output size &quot;, len(z) &#x2F; 1024, &quot;kb&quot;</span><br><span class="line">	print &quot;process size&quot;, process_size, &quot;kb&quot;</span><br><span class="line">	print</span><br><span class="line">	</span><br><span class="line">loop_count &#x3D; 100000</span><br><span class="line">pid &#x3D; os.getpid()</span><br><span class="line"></span><br><span class="line">if len(argv) &#x3D;&#x3D; 2:</span><br><span class="line">	call_method(argv[1])</span><br><span class="line">else:</span><br><span class="line">	print &quot;Usage: python stest.py &lt;n&gt;\n&quot; \</span><br><span class="line">		&quot;  where n is the method number to test&quot;</span><br></pre></td></tr></table></figure>
<p><strong>Results: Twenty thousand integers</strong></p>
<p>In the first test 20,000 integers were concatenated into a string 86kb long.</p>
<p>Concatenations  per second         Process size (kB)<br>     Method 1    3770         2424<br>     Method 2    2230         2424<br>     Method 3    29,600         2452<br>     Method 4    83,700         3028<br>     Method 5    90,900         2536<br>     Method 6    119,800         3000</p>
<p><strong>Results: Five hundred thousand integers</strong></p>
<p>Next I tried a run of each method using 500,000 integers concatenated into a string 2,821 kB long. This is a much more serious test and we start to see the size of the python interpreter process grow to accomodate the data structures used in the computation.</p>
<p>Concatenations per second         Process size (kB)<br>     Method 3    17,100         8,016<br>     Method 4    74,800         22,872<br>     Method 5    94,900         10,480<br>     Method 6    102,100         22,844</p>
<p><strong>Conclusions</strong></p>
<p>I would use Method 6 in most real programs. It’s fast and it’s easy to understand. It does require that you be able to write a single expression that returns each of the values to append. Sometimes that’s just not convenient to do - for example when there are several different chunks of code that are generating output. In those cases you can pick between Method 4 and Method 5.</p>
<p>Method 4 wins for flexibility. You can use all of the normal slice operations on your list of strings, for insertions, deletions and modifications. The performance for appending is pretty decent.</p>
<p>Method 5 wins out on efficiency. It’s uses less memory than either of the list methods (4 &amp; 6) and it’s faster than even the list comprehension for very large numbers of operations (more than about 700,000). If you’re doing a lot of string appending cStringIO is the way to go.</p>
]]></content>
      <categories>
        <category>language</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>language</tag>
        <tag>go</tag>
      </tags>
  </entry>
  <entry>
    <title>flink</title>
    <url>/2020/06/07/%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%8B%BC%E6%8E%A5-1/</url>
    <content><![CDATA[<h1 id="字符串拼接"><a href="#字符串拼接" class="headerlink" title="字符串拼接"></a>字符串拼接</h1>]]></content>
      <categories>
        <category>language</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>language</tag>
        <tag>go</tag>
      </tags>
  </entry>
  <entry>
    <title>flink定制jvm监控metrics</title>
    <url>/2020/06/07/flink%E5%AE%9A%E5%88%B6jvm%E7%9B%91%E6%8E%A7metrics/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>flink</category>
      </categories>
      <tags>
        <tag>flink</tag>
        <tag>java</tag>
      </tags>
  </entry>
</search>
